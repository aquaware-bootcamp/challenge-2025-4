name: Day 6 - Validation Workflow (SSM)

on:
  push:
    branches:
      - main
      - marco

# Variables de entorno globales (USAN SECRETS DE FORMA SEGURA)
env:
  AWS_REGION: ${{ secrets.AWS_REGION_MARCO }} 
  EC2_INSTANCE_ID: ${{ secrets.AWS_EC2_ID_MARCO }} 
  DB_HOST: ${{ secrets.AWS_DB_HOST_DNS }} 
  DB_SECRET_ARN: ${{ secrets.AWS_RDS_SECRET_ARN_MARCO }} # Ya guardado en Secrets

jobs:
  validate-infrastructure:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # --- PASO 1: AUTENTICACIÓN (OIDC) ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_VALIDATION_ROLE_ARN_MARCO }}
          aws-region: ${{ env.AWS_REGION }}

            # --- PASO 2: VALIDACIÓN DE DB (PSQL con SECRETS MANAGER) ---
      - name: 1. Validate RDS Connection & Get Secret
        run: |
          # El ARN del Secreto y Host están disponibles en el entorno ENV.
          
          # ⭐ 1. Definir el script Bash con sintaxis HERE-STRING para evitar problemas de comillas anidadas.
          #    Las variables $DB_HOST y $DB_SECRET_ARN se resuelven aquí por el runner de GitHub.
          AWS_COMMAND=$(cat << 'EOF'
            # 1. Instalar JQ para poder parsear el JSON de Secrets Manager
            sudo apt-get update && sudo apt-get install -y jq
            
            # 2. Recuperar la contraseña de Secrets Manager
            # NOTA: EL SECRETO DEBE SER LEÍDO POR EL EC2 USANDO SU ROL IAM.
            SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "${DB_SECRET_ARN}" --query SecretString --output text)
            
            # 3. Parsear el JSON del secreto para obtener solo la contraseña
            DB_PASSWORD=$(echo "$SECRET_VALUE" | jq -r .password)
            
            # 4. Conexión Psql: Exportar la contraseña y ejecutar la prueba
            export PGPASSWORD="$DB_PASSWORD"
            psql -h ${DB_HOST} -U pgadmin -d postgres -c 'SELECT 1;' sslmode=require
            
          EOF
          )
          
          # 3. Enviar el comando SSM al EC2
          aws ssm send-command \
            --instance-ids ${{ env.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Validating DB connection" \
            --parameters commands="$AWS_DB_COMMAND"

    #   # --- PASO 3: VALIDACIÓN DE TOOLCHAINS (Java/Docker) ---
    #   - name: 2. Validate Java and .NET Builds inside Docker
    #     run: |
    #       # Script que se ejecutará en el EC2 para iniciar el contenedor
    #       AWS_DOCKER_COMMAND="
    #         # Ejecutar el contenedor de desarrollo y probar Java y .NET
    #         docker run --rm marco-dev-image:dev bash -c '
    #           echo \"Validando Java...\"; java -version; 
    #           echo \"Validando DotNet...\"; dotnet --info;
    #           echo \"Validando Maven...\"; mvn -v;
    #         '
    #       "
    #       aws ssm send-command --instance-ids ${{ env.EC2_INSTANCE_ID }} --document-name "AWS-RunShellScript" \
    #         --parameters commands="$AWS_DOCKER_COMMAND"