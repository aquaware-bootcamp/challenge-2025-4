name: Day 6 - Validation Workflow (SSM)

on:
  push:
    branches:
      - main
      - marco

# Variables de entorno globales (USAN SECRETS DE FORMA SEGURA)
env:
  AWS_REGION: ${{ secrets.AWS_REGION_MARCO }} 
  EC2_INSTANCE_ID: ${{ secrets.AWS_EC2_ID_MARCO }} 
  DB_HOST: ${{ secrets.AWS_DB_HOST_DNS }} 
  DB_SECRET_ARN: ${{ secrets.AWS_RDS_SECRET_ARN_MARCO }} # Ya guardado en Secrets

jobs:
  validate-infrastructure:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # --- PASO 1: AUTENTICACIÓN (OIDC) ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_VALIDATION_ROLE_ARN_MARCO }}
          aws-region: ${{ env.AWS_REGION }}

      # --- PASO 2: VALIDACIÓN DE DB (PSQL con SECRETS MANAGER) ---
      - name: 1. Validate RDS Connection & Get Secret
        run: |
            SECRET_ARN="${{ secrets.AWS_RDS_SECRET_ARN_MARCO }}"

            echo "🔹 Validando conexión a la base de datos..."
            #  Construir el comando en una sola línea y correctamente escapado
            AWS_DB_COMMAND="DB_SECRET=\$(aws secretsmanager get-secret-value --secret-id ${SECRET_ARN} --query SecretString --output text | jq -r .password); export PGPASSWORD=\$DB_SECRET; psql -h ${{ env.DB_HOST }} -U pgadmin -d postgres -c 'SELECT 1;' --set=sslmode=require"

            echo "🔹 Validando Java..."
            java -version
            javac -version
            cat > Hello.java <<'EOF'
            public class Hello {
                public static void main(String[] a){
                    System.out.println("Java OK ✅");
                }
            }
            EOF
            javac Hello.java && java Hello

            # ✅ NUEVO BLOQUE: automatiza el envío y monitoreo del comando
            # Envía el comando vía SSM y guarda el CommandId
            COMMAND_ID=$(aws ssm send-command \
              --instance-ids ${{ env.EC2_INSTANCE_ID }} \
              --document-name "AWS-RunShellScript" \
              --comment "Validating DB connection" \
              --parameters '{"commands":["'"$AWS_DB_COMMAND"'"]}' \
              --query "Command.CommandId" \
              --output text)

            echo "✅ Comando enviado con ID: $COMMAND_ID"

            # Esperar unos segundos para que el comando se inicialice
            sleep 5

            # Consultar el estado hasta que termine
            STATUS="Pending"
            while [ "$STATUS" == "Pending" ] || [ "$STATUS" == "InProgress" ]; do
              STATUS=$(aws ssm list-command-invocations \
                --command-id "$COMMAND_ID" \
                --details \
                --query "CommandInvocations[0].Status" \
                --output text)
              
              echo "⏳ Estado actual: $STATUS"
              sleep 5
            done

            echo "📋 Estado final: $STATUS"

            # Mostrar salida del comando
            aws ssm list-command-invocations \
              --command-id "$COMMAND_ID" \
              --details \
              --output json
